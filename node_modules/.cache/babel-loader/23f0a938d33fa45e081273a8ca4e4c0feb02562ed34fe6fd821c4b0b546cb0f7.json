{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clau\\\\Desktop\\\\v_day_2024\\\\vday\\\\src\\\\kiss.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; // Assuming you have some CSS for styling\nimport kiss1 from \"./img/kiss1.jpg\";\nimport kiss2 from \"./img/kiss2.jpg\";\nimport kiss3 from \"./img/kiss3.jpg\";\n\n// Define an array of image URLs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst images = [kiss1, kiss2, kiss3];\n\n// Frame component to display an image\nconst Frame = ({\n  src\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"frame\",\n  children: /*#__PURE__*/_jsxDEV(\"img\", {\n    src: src,\n    alt: \"Image\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 14,\n  columnNumber: 3\n}, this);\n\n// App component to render frames with images\n_c = Frame;\nconst Kiss = () => {\n  _s();\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentImageIndex(prevIndex => {\n        const nextIndex = prevIndex + 1;\n        return nextIndex < images.length ? nextIndex : 0;\n      });\n    }, 800); // Change the interval time as needed (in milliseconds)\n\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"frames\",\n      children: images.map((src, index) => /*#__PURE__*/_jsxDEV(Frame, {\n        src: index === currentImageIndex ? src : ''\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 7\n  }, this);\n};\n_s(Kiss, \"iwdYV/csWqs0gMEM0R8yiwCHnVs=\");\n_c2 = Kiss;\nexport default Kiss;\nvar _c, _c2;\n$RefreshReg$(_c, \"Frame\");\n$RefreshReg$(_c2, \"Kiss\");","map":{"version":3,"names":["React","useState","useEffect","kiss1","kiss2","kiss3","jsxDEV","_jsxDEV","images","Frame","src","className","children","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","Kiss","_s","currentImageIndex","setCurrentImageIndex","interval","setInterval","prevIndex","nextIndex","length","clearInterval","map","index","_c2","$RefreshReg$"],"sources":["C:/Users/clau/Desktop/v_day_2024/vday/src/kiss.js"],"sourcesContent":["import React ,{useState,useEffect} from 'react';\r\nimport './App.css'; // Assuming you have some CSS for styling\r\nimport kiss1 from \"./img/kiss1.jpg\";\r\nimport kiss2 from \"./img/kiss2.jpg\";\r\nimport kiss3 from \"./img/kiss3.jpg\";\r\n\r\n// Define an array of image URLs\r\nconst images = [\r\n  kiss1,kiss2,kiss3\r\n];\r\n\r\n// Frame component to display an image\r\nconst Frame = ({ src }) => (\r\n  <div className=\"frame\">\r\n    <img src={src} alt=\"Image\" />\r\n  </div>\r\n);\r\n\r\n// App component to render frames with images\r\nconst Kiss=()=> {\r\n    const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n\r\n    useEffect(() => {\r\n      const interval = setInterval(() => {\r\n        setCurrentImageIndex((prevIndex) => {\r\n          const nextIndex = prevIndex + 1;\r\n          return nextIndex < images.length ? nextIndex : 0;\r\n        });\r\n      }, 800); // Change the interval time as needed (in milliseconds)\r\n  \r\n      return () => clearInterval(interval);\r\n    }, []);\r\n  \r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"frames\">\r\n          {images.map((src, index) => (\r\n            <Frame key={index} src={index === currentImageIndex ? src : ''} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Kiss;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAACC,SAAS,QAAO,OAAO;AAC/C,OAAO,WAAW,CAAC,CAAC;AACpB,OAAOC,KAAK,MAAM,iBAAiB;AACnC,OAAOC,KAAK,MAAM,iBAAiB;AACnC,OAAOC,KAAK,MAAM,iBAAiB;;AAEnC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAG,CACbL,KAAK,EAACC,KAAK,EAACC,KAAK,CAClB;;AAED;AACA,MAAMI,KAAK,GAAGA,CAAC;EAAEC;AAAI,CAAC,kBACpBH,OAAA;EAAKI,SAAS,EAAC,OAAO;EAAAC,QAAA,eACpBL,OAAA;IAAKG,GAAG,EAAEA,GAAI;IAACG,GAAG,EAAC;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAC1B,CACN;;AAED;AAAAC,EAAA,GANMT,KAAK;AAOX,MAAMU,IAAI,GAACA,CAAA,KAAK;EAAAC,EAAA;EACZ,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EAE7DC,SAAS,CAAC,MAAM;IACd,MAAMqB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCF,oBAAoB,CAAEG,SAAS,IAAK;QAClC,MAAMC,SAAS,GAAGD,SAAS,GAAG,CAAC;QAC/B,OAAOC,SAAS,GAAGlB,MAAM,CAACmB,MAAM,GAAGD,SAAS,GAAG,CAAC;MAClD,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;IAET,OAAO,MAAME,aAAa,CAACL,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEhB,OAAA;IAAKI,SAAS,EAAC,WAAW;IAAAC,QAAA,eACxBL,OAAA;MAAKI,SAAS,EAAC,QAAQ;MAAAC,QAAA,EACpBJ,MAAM,CAACqB,GAAG,CAAC,CAACnB,GAAG,EAAEoB,KAAK,kBACrBvB,OAAA,CAACE,KAAK;QAAaC,GAAG,EAAEoB,KAAK,KAAKT,iBAAiB,GAAGX,GAAG,GAAG;MAAG,GAAnDoB,KAAK;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgD,CAClE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEZ,CAAC;AAAAG,EAAA,CAvBKD,IAAI;AAAAY,GAAA,GAAJZ,IAAI;AAyBV,eAAeA,IAAI;AAAC,IAAAD,EAAA,EAAAa,GAAA;AAAAC,YAAA,CAAAd,EAAA;AAAAc,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}